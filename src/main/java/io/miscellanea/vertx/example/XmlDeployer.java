package io.miscellanea.vertx.example;

import io.vertx.config.ConfigRetriever;
import io.vertx.core.DeploymentOptions;
import io.vertx.core.Vertx;
import io.vertx.core.json.JsonObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.nio.file.Files;
import java.nio.file.Path;

/**
 * Deploys this example's verticles, which consist of...
 * <ul>
 *     <li>One or more XML <i>shredding</i> verticles</li>
 *     <li>A <i>processor</i> verticle which processes events generated by
 *     a SAX content handler</li>
 * </ul>
 *
 * Together, these verticles demonstrate how one might "shred" an
 * XML document with Vert.x.
 *
 * @author Jason Hallford
 */
public class XmlDeployer {
  // Fields
  public static final Logger LOGGER = LoggerFactory.getLogger(XmlDeployer.class);

  // Constructors
  public XmlDeployer() {}

  // Main method
  public static void main(String[] args) {
    if (args.length < 1) {
      LOGGER.error("You must provide a path to the XML file on the command line.");
      return;
    }

    if (!Files.exists(Path.of(args[0]))) {
      LOGGER.error("XML file '{}' does not exist.", args[0]);
    }

    LOGGER.debug("Bootstrapping the Vert.x runtime.");
    var vertx = Vertx.vertx();
    LOGGER.debug("Vert.x successfully initialized.");

    var configRetrieverOpts =
        ConfigStoreHelper.buildDefaultRetrieverOptions("conf/shred-config.json");

    ConfigRetriever.create(vertx, configRetrieverOpts)
        .getConfig(
            config -> {
              LOGGER.debug("Deploying DBLP processor verticle.");
              vertx.deployVerticle(TagNameProcessorVerticle.class.getName());

              int shredderCount = config.result().getInteger("shred-verticle-count");
              LOGGER.debug("Deploying {} XML shredding verticle(s).", shredderCount);

              var opts = new DeploymentOptions().setInstances(shredderCount).setWorker(true);
              vertx.deployVerticle(
                  XmlShredderVerticle.class.getName(),
                  opts,
                  result -> {
                    if (result.succeeded()) {

                      // Submit jobs for processing...
                      int jobCount = config.result().getInteger("job-count");
                      LOGGER.debug("Submitting {} XML shredding job(s).", jobCount);

                      for (int i = 0; i < jobCount; i++) {
                        vertx
                            .eventBus()
                            .send(
                                "xml.shred",
                                new JsonObject()
                                    .put(
                                        "doc-type",
                                        "xml")
                                    .put("path-to-file", args[0])
                                    .put("job-id", (i+1)));
                      }

                      LOGGER.debug("Shredding messages sent.");
                    } else {
                      // Terminate the JVM; the verticle didn't start.
                      vertx.close();
                    }
                  });
            });
  }
}
